;;; Zimblo's Awesome Config --- minimal config for writing and fun  -*- lexical-binding: t; -*-
;; Last Sync: Sat May 31 03:18:37 PM MDT 2025
;;; This should be compatible with any (up to date) version of Emacs.
;;; (load) functions may bring incompatibility 



;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

(load "~/.emacs.d/rss.el")
(load "~/.emacs.d/macro.el")
(load "~/.emacs.d/packages.el")
;; ^ if shit gets fucked this is the problem ^

;; Idea: a hook that, when file.note, automatically saves to ~/.note/

;; things from better-defaults.el
(show-paren-mode 1)

(global-set-key (kbd "M-/") 'hippie-expand)
;; (global-set-key (kbd "C-s") 'isearch-forward-regexp)
;; (global-set-key (kbd "C-r") 'isearch-backward-regexp)
;; (global-set-key (kbd "C-M-s") 'isearch-forward)
;; (global-set-key (kbd "C-M-r") 'isearch-backward)
(setq-default indent-tabs-mode nil)

;; Put backup files (file.txt~) in .emacs.d/
;; this applies to pre-made files opened with emacs
(setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
(setq backup-by-copying t)

;; Disable save prompts when killing a buffer
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function kill-buffer-query-functions))
;; Disable auto-save files
(setq auto-save-default nil)

(setq line-spacing .2)


(use-package eww
  :defer t
  :custom (eww-retrieve-command nil)
  :config

  (defun wiki (page)
    "Search wikipedia for info on a specific term"
    (interactive (list (completing-read "Search Term: " nil)))
    (eww (format "https://en.wikipedia.org/wiki/%s" page)))

  (defun my/eww-readablity ()
    (interactive)
    (let ((eww-retrieve-command '("rdrview" "-H")))
      (eww-reload nil nil)))
  ;; I think this slows rendering down
)

;; Save place in file
(save-place-local-mode 1) ;; persistent
(setq save-place-file (expand-file-name "places" user-emacs-directory))

;; complete pairs
(electric-pair-mode)
(electric-quote-mode)


;; (ido-mode)

;; Dired settings
(setq dired-listing-switches "-lh --time-style=long-iso -t --group-directories-first")

;; btw, C-x C-q dired-toggle-read-only

(require 'dired-x)

(use-package dired
  :ensure nil
  :commands (dired)
  :hook ((dired-mode . hl-line-mode)
         (dired-mode . dired-omit-mode)
         (dired-mode . dired-hide-details-mode))
  :bind (:map dired-mode-map
	      ("-" . dired-up-directory))
  :init
  ;; let me drag files into other programs
  (setq dired-mouse-drag-files t)
  (setq dired-bind-jump nil)
  :config
  (global-set-key (kbd "C-x C-d") 'dired-jump)
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (setq dired-dwim-target t)
  (setq dired-listing-switches "-aghoA --group-directories-first")
  ;; Hide . and .. in dired

  (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..*$")

;;;;; xdg-open integration
  
  ;; prevent opening extra dired buffers
  ;; emacs 28
  (setq dired-kill-when-opening-new-dired-buffer t))


;; might be awful for normal writing
;; hook;; Macro edit
(global-set-key (kbd "C-x M-m") 'kmacro-edit-macro)



;; Interface binds
;; want to use hydra for this
;; (global-set-key (kbd "C-c s") 'scratch-buffer)
;; (global-set-key (kbd "C-c c") 'calendar)
;; (global-set-key (kbd "C-c r") 'elfeed)
;; (global-set-key (kbd "C-c m") 'dashboard-open)

;; Misc unbinds (things I find silly)
(global-unset-key (kbd "C-x f")) ;; fill command
(global-unset-key (kbd "C-x m")) ;; compose mail
;;(global-unset-key (kbd "C-x C-c"))

;; replaces upcase-word
(global-set-key (kbd "M-u") 'undo-redo)

;; (global-set-key (kbd "C-x C-u") 'undo-tree-mode)

;; Open in new window
;;(global-set-key (kbd "C-M-m") 'make-frame)

;; Auto focus windows
(defadvice split-window (after move-point-to-new-window activate)
  "Moves the point to the newly created window after splitting."
  (other-window 1))

(setq cursor-type 'box)

;; Syntax highlighting 
(setq font-lock-maximum-decoration t)

;; Dictionary (localhost is dictd)
(global-set-key (kbd "C-c l") #'dictionary-lookup-definition)
(setq dictionary-server "localhost")

;; Line wrap
(global-visual-line-mode t)
(add-hook 'prog-mode-hook 'visual-line-mode)

;; line numba
(global-display-line-numbers-mode)

;; show whitespace
(whitespace-mode)
(add-hook 'prog-mode-hook 'whitespace-mode)

;; highlight current line
(global-hl-line-mode)

;; Do not prompt to save when exiting Emacs
(setq confirm-kill-emacs nil)

;; Spell check for text files using flyspell (built-in)
;;(add-hook 'text-mode-hook 'flyspell-mode)
;;(eval-after-load 'flyspell
;;  '(progn
;;     (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-word)
;;     ))
;; why the fuck is this a text mode hook

;; Set eww as default browser
(setq browse-url-browser-function 'eww-browse-url)
(setq eww-download-directory "~/.emacs.d/eww/")


;; === BUFFER/WINDOW MANAGEMENT START ===

(defun zimblo-shell-to-buffer ()
  (interactive)
  (let ((current-prefix-arg '(4))) ; equivalent to C-u
    (call-interactively #'shell-command)))

;; does unbind normal shell command
;; M-| does shell on region
(global-set-key (kbd "M-!") #'zimblo-shell-to-buffer)


(global-set-key (kbd "C-x k")	       
		(lambda ()
		  (interactive)
		  (kill-buffer (current-buffer)))
		)
;; ^ just buffer, not window. non-interactive.
(global-set-key (kbd "C-x C-k") 'kill-buffer-and-window)



;; kills buffer not interactive.  


;; C-x C-b runs ibuffer instead of just listing buffers
(global-unset-key (kbd "C-x C-b"))
(global-set-key (kbd "C-x C-b")'ibuffer)

(defun buffer-wipe()
  "Kill all buffers"
  (interactive)
  (mapcar 'kill-buffer (buffer-list))
  (delete-other-windows)
  )




;; (defun buffer-wipe () 
;;   "Kill all buffers except for default ones, and print the names of killed buffers."
;;   (interactive)
;;   (let ((default-buffers '("*scratch*" "*Messages*" "*dashboard*" "*straight-process*" "*Async-native-compile-log*"))) ; Add more default buffers if needed
;;     (dolist (buf (buffer-list))
;;       (let ((buf-name (buffer-name buf)))
;;         (when (and (not (member buf-name default-buffers))
;;                    (not (string-match-p "^\\*" buf-name))) ; Exclude all other special buffers
;;           (message "Killing buffer: %s" buf-name)
;;           (kill-buffer buf))))))




;; === BUFFER/WINDOW MANAGEMENT END ===


;; === CUSTOM VARIABLES START ===
;; (managed by Emacs Custom)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(custom-enabled-themes '(modus-vivendi))
 '(display-time-mode t)
 '(global-display-line-numbers-mode t)
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))
 '(global-display-line-numbers-mode t)
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Liberation Mono" :foundry "1ASC" :slant normal :weight regular :height 151 :width normal)))))


;; "JetBrainsMono Nerd Font,JetBrainsMono NF

;; === CUSTOM VARIABLES END ===
